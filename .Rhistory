typeof(challenge2)
challenge3 <- c(1,2,'f')
typeof(challenge3)
?paste
??csv
?csv
??csv
??paste
?paste
paste(1,2)
paste(sep="/",1,2)
paste(sep="/",collapse=";", 1,2)
paste(sep="/", c(1,2), c(3,4))
paste(sep="/", collapse=";",c(1,2), c(3,4))
paste(sep="/", collapse=";",c(1,2), c(3,4), c(5,6), c(7,8))
paste(sep="/t", collapse=";",c(1,2), c(3,4), c(5,6), c(7,8))
paste(sep="\t", collapse=";",c(1,2), c(3,4), c(5,6), c(7,8))
paste(sep=",", collapse=";",c(1,2), c(3,4), c(5,6), c(7,8))
??csv
paste(sep="\t",1,2,4,5)
?paste
paste(sep=" ",1,2,4,5)
paste(sep="\t",1,2,4,5)
names(x) <- c("a","b","c","d","e")
names(x)
x
x[1]
str(x)
typeof(x)
x[4]
x[c(1,3)]
x[(1,3)]
x[1:4]
x[c(1,1,2)]
??c
?c
x[1,3]
x[-2]
x[c(-2,-5)]
x[c(-1,-5)]
-c(1,5)
x[-c(1,5)]
x[4]
x[c(4)]
x[c(4)]x
x
x <- c(x,7.9)
x
names(x) <- ("a","b","c","d","e","f")
names(x) <- (x,"f")
x[c("a","c")]
names(x)
names(x) <- c("a","b","c","d","e","f")
names(x)
x
names(x) <- c(x,"g")
x[-which(names(x) == "a")]
names(x) == "a"
which(names(x) == "a")
-which(names(x) == "a")
x[-which(names(x) == "a")]
x
names(x) %in% c("a","c")
x
names(x)
x[-which(names(x) %in% c("a","c"))]
x[names(x) == c('a','c')]
x[which(names(x) == c('a','c'))]
??which
?which
x[(names(x) == c('fat','cow'))]
x[(names(x) == c('b','f'))]
names(x) == c('b','f')
b
x
names(x) == c('b','f')
names(x)
names(x) == c('b')
names(x) %in% c('b','f')
x <- c(5.4, 6.2, 7.1, 4.8, 7.5)
names(x) <- c('a', 'b', 'c', 'd', 'e')
print(x)
x <- c(5.4, 6.2, 7.1, 4.8, 7.5)
names(x) <- c('a', 'b', 'c', 'd', 'e')
print(x)
x
x[-which(names(x) == "c")]
x[-(names(x) == "c")]
?which
(names(x) == "c")
x[-(names(x) == "c")]
x[-which(names(x) == "c")]
x[-(names(x) == "a")]
x[-(names(x) == "e")]
names(x) <- c('a', 'b', 'c', 'e', 'e')
x[-(names(x) == "e")]
x[-which(names(x) == "e")]
x[which(names(x) == "e")]
x[-which(names(x) == "e")]
x <- c(5.4, 6.2, 7.1, 4.8, 7.5)
names(x) <- c('a', 'b', 'c', 'd', 'e')
print(x)
x <- c(5.4, 6.2, 7.1, 4.8, 7.5)
names(x) <- c('a', 'b', 'c', 'd', 'e')
print(x)
x[-(names(x) == "purple")]
x[-(names(x) == "a")]
x[-(names(x) == "d")]
x[-which(names(x) == "d")]
x <- c(5.4, 6.2, 7.1, 4.8, 7.5)
names(x) <- c('a', 'b', 'c', 'd', 'e')
print(x)
x > 7
x[x>7]
x < 5
x > 7 | x < 5
x[x > 7 | x < 5]
x[x]
x
?[]
x[x]
x[x < 7 & x > 4]
print(x[x>7])
x[x>7]
coat <- c("calico","black","tabby")
coat
weight <- c(2.1,5.0,3.2)
weight
likes_string <- c(1,0,1)
likes_string
cats
cats
cats <- data.frame(coat,weight,likes_string)
cats
cats$weight
cats$coat
cats$weight + 2
paste("My cat is", cats$coat)
paste(cats&weight, cats$coat)
age <- c(2,3,5,12)
age
cats <- cbind(cats,age)
age <- c(4,5,8)
cats <- cbind(cats,age)
cats
newRow <- list("tortoiseshell",3.3,TRUE,9)
newRow
levels(cats&coats)
levels(cats&coat)
levels(cats&coat)
levels(cats&coat)
levels(cats$coat)
str(cats)
cats
cats
cats$coat <- as.character(cats$coat)
str(cats)
cats <- rbind(newRow)
cats
cats <- rbind(cats,newRow)
cats
cats <- data.frame(coat,weight,likes_string)
cats
cats$coat <- as.character(cats$coat)
str(cats)
cats <- rbind(cats,newRow)
cats
cats[-4,]
na.omit(cats)
??na.omit
?na.omit
for (i in continents) {
life <- mean(gapminder[gapminder$continent == i, "lifeExp"]$lifeExp)
great <- c(life > 65)
if (great == TRUE) {
cat("The mean life expectancy of",i, "is", life, "which is is greater than 65.\n")
}
if (great == FALSE){
cat("The mean life expectancy of",i, "is", life, "which is is less than 65.\n")
}
for (i in continents) {
life <- mean(gapminder[gapminder$continent == i, "lifeExp"]$lifeExp)
great <- c(life > 65)
if (great == TRUE) {
cat("The mean life expectancy of",i, "is", life, "which is is greater than 65.\n")
}
if (great == FALSE){
cat("The mean life expectancy of",i, "is", life, "which is is less than 65.\n")
}
#cat("The mean life expectancy of",i, "is", life, "which is", great, ".\n")
}
continents <- unique(gapminder$continent)
continents
for (i in continents) {
life <- mean(gapminder[gapminder$continent == i, "lifeExp"]$lifeExp)
great <- c(life > 65)
if (great == TRUE) {
cat("The mean life expectancy of",i, "is", life, "which is is greater than 65.\n")
}
if (great == FALSE){
cat("The mean life expectancy of",i, "is", life, "which is is less than 65.\n")
}
#cat("The mean life expectancy of",i, "is", life, "which is", great, ".\n")
}
gapminder
continents <- unique(gapminder$continent)
continents
for (i in continents) {
life <- mean(gapminder[gapminder$continent == i, "lifeExp"]$lifeExp)
great <- c(life > 65)
if (great == TRUE) {
cat("The mean life expectancy of",i, "is", life, "which is is greater than 65.\n")
}
if (great == FALSE){
cat("The mean life expectancy of",i, "is", life, "which is is less than 65.\n")
}
#cat("The mean life expectancy of",i, "is", life, "which is", great, ".\n")
}
gapminder[gapminder$lifeExp, "lifeExp"]$lifeExp
library(gapminder)
gapminder
continents <- unique(gapminder$continent)
continents
for (i in continents) {
life <- mean(gapminder[gapminder$continent == i, "lifeExp"]$lifeExp)
great <- c(life > 65)
if (great == TRUE) {
cat("The mean life expectancy of",i, "is", life, "which is is greater than 65.\n")
}
if (great == FALSE){
cat("The mean life expectancy of",i, "is", life, "which is is less than 65.\n")
}
#cat("The mean life expectancy of",i, "is", life, "which is", great, ".\n")
}
for (i in continents) {
life <- mean(gapminder[gapminder$continent == i, "lifeExp"]$lifeExp)
great <- c(life > 65)
if (great == TRUE) {
cat("The mean life expectancy of",i, "is", life, "which is greater than 65.\n")
}
if (great == FALSE){
cat("The mean life expectancy of",i, "is", life, "which is less than 65.\n")
}
#cat("The mean life expectancy of",i, "is", life, "which is", great, ".\n")
}
az.countries <- gapminder[starts.with %in% c("A","Z"),]
az.countries
ggplot(data=az.countries,aes(x=year,y=lifeExp,color=continent)) +
geom_line() + facet_wrap(~ country) +
xlab("Year") + ylab("Life Expectancy (Yr)") +
ggtitle("Figure 1") + scale_colour_discrete(name="Continent")
library(ggplot2)
library(gapminder)
gapminder
## ggplot operates on layer system like photoshop - the first layer (global layer, applies to all the layers) says what data, and what the axis are, the second tells you what geom we want
ggplot(data=gapminder,aes(x=gdpPercap,y=lifeExp)) + geom_point() #Creates a gap that puts GDP/Capita on the x-axis and Life Exp on the y-axis
ggplot(data=gapminder,aes(x=gdpPercap,y=lifeExp,by=country,color=continent)) + geom_point()
ggplot(data=gapminder,aes(x=year,y=lifeExp,by=country,color=continent)) +
geom_line()
ggplot(data=gapminder,aes(x=year,y=lifeExp,by=country,color=continent)) +
geom_line() + geom_point()
ggplot(data=gapminder,aes(x=year,y=lifeExp,by=country)) +
geom_line(aes(color=continent)) + geom_point()
ggplot(data=gapminder,aes(x=year,y=lifeExp,by=country)) +
geom_line(aes(colour="red")) + geom_point()
ggplot(data=gapminder,aes(x=gdpPercap,y=lifeExp)) +
geom_point(aes(colour=continent),alpha=.5)
ggplot(data=gapminder,aes(x=gdpPercap,y=lifeExp)) +
geom_point(aes(colour=continent),alpha=.5) + scale_x_log10() +
geom_smooth(method="lm", size=0.5, level = 0.95)
starts.with <- substr(gapminder$country,start=1,stop=1)
starts.with
az.countries <- gapminder[starts.with %in% c("A","Z"),]
az.countries
ggplot(data=az.countries,aes(x=year,y=lifeExp,color=continent)) +
geom_line() + facet_wrap(~ country) +
xlab("Year") + ylab("Life Expectancy (Yr)") +
ggtitle("Figure 1") + scale_colour_discrete(name="Continent")
library(gapminder)
gapminder
continents <- unique(gapminder$continent)
continents
for (i in continents) {
life <- mean(gapminder[gapminder$continent == i, "lifeExp"]$lifeExp)
great <- c(life > 65)
if (great == TRUE) {
cat("The mean life expectancy of",i, "is", life, "which is greater than 65.\n")
}
if (great == FALSE){
cat("The mean life expectancy of",i, "is", life, "which is less than 65.\n")
}
#cat("The mean life expectancy of",i, "is", life, "which is", great, ".\n")
}
gapminder
?c
life
life > 65
for (i in continents) {
life <- mean(gapminder[gapminder$continent == i, "lifeExp"]$lifeExp)
great <- life > 65
if (great == TRUE) {
cat("The mean life expectancy of",i, "is", life, "which is greater than 65.\n")
}
if (great == FALSE){
cat("The mean life expectancy of",i, "is", life, "which is less than 65.\n")
}
#cat("The mean life expectancy of",i, "is", life, "which is", great, ".\n")
}
gapminder[,5:6]
gapminder[,-c(1:4)]
gapminder[,-(1:4)]
gapminder[1, c(4,5)]
gapminder[1, (4,5)]
# These are both ways to just view the data for 2002 and 2007
gapminder[gapminder$year == 2002 | gapminder$year == 2007,] # the | is the OR
gapminder$continent
continents <- unique(gapminder$continent)
continents
str(continents)
for (i in continents) {
life <- mean(gapminder[gapminder$continent == i, "lifeExp"]$lifeExp)
great <- life > 65
if (great == TRUE) {
cat("The mean life expectancy of",i, "is", life, "which is greater than 65.\n")
}
else {
#if (great == FALSE){
cat("The mean life expectancy of",i, "is", life, "which is less than 65.\n")
}
#cat("The mean life expectancy of",i, "is", life, "which is", great, ".\n")
}
gapminder[gapminder$lifeExp, "lifeExp"]
gapminder[gapminder$lifeExp, "lifeExp"]$lifeExp
gapminder[gapminder$lifeExp, "lifeExp"]
gapminder[gapminder$lifeExp, "lifeExp"]$lifeExp
mean(gapminder[gapminder$lifeExp, "lifeExp"])
mean(gapminder[gapminder$lifeExp, "lifeExp"]#$lifeExp)
mean(gapminder[gapminder$lifeExp, "lifeExp"]$lifeExp)
mean(gapminder[gapminder$lifeExp, "lifeExp"]$lifeExp)
?$
life
?$
life
??$
gapminder$continent
ggplot(data=gapminder,aes(x=year,y=lifeExp,by=country)) +
geom_line(aes(color=continent)) + geom_point()
ggplot(data=gapminder,aes(x=year,y=lifeExp,by=country,color=continent))
ggplot(data=gapminder,aes(x=year,y=lifeExp,by=country,color=continent)) +
geom_line()
ggplot(data=gapminder,aes(x=year,y=lifeExp,by=country,color=continent)) +
geom_line() + geom_point()
ggplot(data=gapminder,aes(x=year,y=lifeExp,by=country)) +
geom_line(aes(color=continent)) + geom_point()
ggplot(data=gapminder,aes(x=gdpPercap,y=lifeExp)) +
geom_point(aes(colour=continent),alpha=.5) + scale_x_log10() +
geom_smooth(method="lm", size=0.5, level = 0.95)
ggplot(data=az.countries,aes(x=year,y=lifeExp,color=continent)) +
geom_line() + facet_wrap(~ country) +
xlab("Year") + ylab("Life Expectancy (Yr)") +
ggtitle("Figure 1") + scale_colour_discrete(name="Continent")
ggplot(data=az.countries,aes(x=year,y=lifeExp,color=continent)) +
geom_line() + #facet_wrap(~ country) +
xlab("Year") + ylab("Life Expectancy (Yr)") +
ggtitle("Figure 1") + scale_colour_discrete(name="Continent")
ggplot(data=az.countries,aes(x=year,y=lifeExp,color=continent)) +
geom_line() + facet_wrap(~ continent) +
xlab("Year") + ylab("Life Expectancy (Yr)") +
ggtitle("Figure 1") + scale_colour_discrete(name="Continent")
ggopen = ggplot(data=arishopenfield, aes(x=Condition, y=value, fill=variable)) +
geom_bar(stat="identity", position=position_dodge()) +
labs(#title = "Open Field Data",
#       caption = "WRITE A CAPTION",
#       tag = "Figure #",
x = "Housing Condition",
y = "Time spent in center of field (seconds)") +
geom_dotplot(aes(fill = variable, color = variable), trim = FALSE,
binaxis='y', stackdir='center', dotsize = 0.8,
position = position_dodge(), show.legend = FALSE ) +
theme_bw() +
scale_fill_manual(name="Stress Exposure",
labels = c("Pre-Stress","Post-Stress"),
values=c('dark grey','light grey')) +
scale_color_manual(values = c("black", "black"))
ggopen + points(arishopenfield)
ggopen = ggplot(data=arishopenfield, aes(x=Condition, y=value, fill=variable)) +
geom_bar(stat="identity", position=position_dodge()) +
labs(#title = "Open Field Data",
#       caption = "WRITE A CAPTION",
#       tag = "Figure #",
x = "Housing Condition",
y = "Time spent in center of field (seconds)") +
geom_dotplot(aes(fill = variable, color = variable), trim = FALSE,
binaxis='y', stackdir='center', dotsize = 0.8,
position = position_dodge(), show.legend = FALSE ) +
theme_bw() +
scale_fill_manual(name="Stress Exposure",
labels = c("Pre-Stress","Post-Stress"),
values=c('dark grey','light grey')) +
scale_color_manual(values = c("black", "black"))
ggopen + points(arishopenfield)
install.packages("ggplot2")
install.packages("RColorBrewer")
install.packages("gridExtra")
install.packages("car")
install.packages("Rmisc")
install.packages("reshape2")
install.packages("dplyr")
ggplot(data=arishopenfield, aes(x=Condition, y=value, fill=variable)) +
geom_bar(stat="summary", fun.y="mean", position=position_dodge()) +
labs(#title = "Open Field Data",
#       caption = "WRITE A CAPTION",
#       tag = "Figure #",
x = "Housing Condition",
y = "Time spent in center of field (seconds)") +
geom_dotplot(aes(fill = variable, color = variable), trim = FALSE,
binaxis='y', stackdir='center', dotsize = 0.8,
position = position_dodge(), show.legend = FALSE ) +
theme_bw() +
scale_fill_manual(name="Stress Exposure",
labels = c("Pre-Stress","Post-Stress"),
values=c('dark grey','light grey')) +
scale_color_manual(values = c("black", "black"))
install.packages("ggplot2")
install.packages("RColorBrewer")
install.packages("gridExtra")
install.packages("car")
install.packages("Rmisc")
install.packages("reshape2")
install.packages("dplyr")
install.packages("MASS")
install.packages("ggthemes")
#Packages for linear mixed effects
install.packages("lmerTest")
install.packages("emmeans")
#R-markdown
install.packages("rmarkdown")
library(ggplot2)
library(Rmisc)
library(gridExtra)
library(reshape2)
library(dplyr)
library(RColorBrewer)
library(foreign)
library(lmerTest)
library(car)
library(MASS)
library(rmarkdown)
library(emmeans)
library(ggthemes)
setwd("~/Dropbox/Arish_SeniorResearch_Fall2018/Data_Results/MTTanalysis")
#read.spss is a function that's part of the foreign package. It's allowing me
#convert my SPSS file into a dataframe called arish
arish = read.spss("DataAnalysis.sav", to.data.frame=TRUE)
View(arish)
write.table(arish,"DataAnalysis.txt")
head(arish)
#These functions below are creating three separate files for each of the dependent
#measures and the melt allows me to create long-form dataframes so that it's
# suitable for mixed effects
str(arish)
arishopenfield = melt(arish, id.vars = c("Mouse","Condition"), measure.vars = c("Pre_Open_Time","Post_Open_Time"))
View(arishopenfield)
arishCBC = melt(arish, id.vars = c("Mouse","Condition"), measure.vars = c("Pre_CBC_Choice", "Post_CBC_Choice"))
View(arishCBC)
arishELISA = melt(arish, id.vars = c("Mouse","Condition"), measure.vars = c("Pre_ELISA", "Post_ELISA"))
View(arishELISA)
ggplot(data=arishopenfield, aes(x=Condition, y=value, fill=variable)) +
geom_bar(stat="summary", fun.y="mean", position=position_dodge()) +
labs(#title = "Open Field Data",
#       caption = "WRITE A CAPTION",
#       tag = "Figure #",
x = "Housing Condition",
y = "Time spent in center of field (seconds)") +
geom_dotplot(aes(fill = variable, color = variable), trim = FALSE,
binaxis='y', stackdir='center', dotsize = 0.8,
position = position_dodge(), show.legend = FALSE ) +
theme_bw() +
scale_fill_manual(name="Stress Exposure",
labels = c("Pre-Stress","Post-Stress"),
values=c('dark grey','light grey')) +
scale_color_manual(values = c("black", "black"))
ggplot(data=arishCBC, aes(x=Condition, y=value, fill=variable)) +
geom_bar(stat="summary", fun.y="mean", position=position_dodge()) +
labs(#title = "Open Field Data",
#       caption = "WRITE A CAPTION",
#       tag = "Figure #",
x = "Housing Condition",
y = "% High-Cost/High-Benefit Decisions") +
geom_dotplot(aes(fill = variable, color = variable), trim = FALSE,
binaxis='y', stackdir='center', dotsize = 0.8,
position = position_dodge(), show.legend = FALSE ) +
theme_bw() +
scale_fill_manual(name="Stress Exposure",
labels = c("Pre-Stress","Post-Stress"),
values=c('dark grey','light grey')) +
scale_color_manual(values = c("black", "black"))
ggplot(data=arishELISA, aes(x=Condition, y=value, fill=variable)) +
geom_bar(stat="summary", fun.y="mean", position=position_dodge()) +
labs(#title = "Open Field Data",
#       caption = "WRITE A CAPTION",
#       tag = "Figure #",
x = "Housing Condition",
y = "Mean Urine Corticosterone Concentrations (ng/mL)") +
geom_dotplot(aes(fill = variable, color = variable), trim = FALSE,
binaxis='y', stackdir='center', dotsize = 0.8,
position = position_dodge(), show.legend = FALSE ) +
theme_bw() +
scale_fill_manual(name="Stress Exposure",
labels = c("Pre-Stress","Post-Stress"),
values=c('dark grey','light grey')) +
scale_color_manual(values = c("black", "black"))
